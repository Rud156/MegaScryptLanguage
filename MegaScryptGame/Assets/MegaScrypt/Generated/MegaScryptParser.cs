//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\MegaScrypt.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class MegaScryptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, Var=2, Function=3, Return=4, For=5, Do=6, While=7, In=8, Break=9, 
		Continue=10, If=11, Else=12, Null=13, Bool=14, Or=15, And=16, Equals=17, 
		NEquals=18, GTEquals=19, LTEquals=20, Excl=21, GT=22, LT=23, Add=24, Subtract=25, 
		Multiply=26, Divide=27, Modulus=28, LBrace=29, RBrace=30, Assign=31, Semicolon=32, 
		Underscore=33, Colon=34, LParen=35, RParen=36, LBracket=37, Rbracket=38, 
		PlusEq=39, MinusEq=40, MultiplyEq=41, DivideEq=42, Dot=43, Increment=44, 
		Decrement=45, Comma=46, Id=47, Number=48, Whitespace=49, Comment=50, String=51;
	public const int
		RULE_compoundId = 0, RULE_assignment = 1, RULE_decleration = 2, RULE_increment = 3, 
		RULE_decrement = 4, RULE_expression = 5, RULE_statement = 6, RULE_block = 7, 
		RULE_object = 8, RULE_objectPair = 9, RULE_objectGetter = 10, RULE_objectAccess = 11, 
		RULE_program = 12, RULE_ifStatement = 13, RULE_ifBlock = 14, RULE_elseIfBlock = 15, 
		RULE_elseBlock = 16, RULE_funcDecleration = 17, RULE_varList = 18, RULE_returnStmt = 19, 
		RULE_invocation = 20, RULE_paramList = 21, RULE_array = 22, RULE_arrayIndex = 23, 
		RULE_forStmt = 24, RULE_whileStmt = 25, RULE_foreachStmt = 26, RULE_doWhileStmt = 27, 
		RULE_foreach = 28;
	public static readonly string[] ruleNames = {
		"compoundId", "assignment", "decleration", "increment", "decrement", "expression", 
		"statement", "block", "object", "objectPair", "objectGetter", "objectAccess", 
		"program", "ifStatement", "ifBlock", "elseIfBlock", "elseBlock", "funcDecleration", 
		"varList", "returnStmt", "invocation", "paramList", "array", "arrayIndex", 
		"forStmt", "whileStmt", "foreachStmt", "doWhileStmt", "foreach"
	};

	private static readonly string[] _LiteralNames = {
		null, "'foreach'", "'var'", "'function'", "'return'", "'for'", "'do'", 
		"'while'", "'in'", "'break'", "'continue'", "'if'", "'else'", "'null'", 
		null, "'||'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'!'", "'>'", "'<'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'='", "';'", "'_'", 
		"':'", "'('", "')'", "'['", "']'", "'+='", "'-='", "'*='", "'/='", "'.'", 
		"'++'", "'--'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "Var", "Function", "Return", "For", "Do", "While", "In", "Break", 
		"Continue", "If", "Else", "Null", "Bool", "Or", "And", "Equals", "NEquals", 
		"GTEquals", "LTEquals", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", 
		"Divide", "Modulus", "LBrace", "RBrace", "Assign", "Semicolon", "Underscore", 
		"Colon", "LParen", "RParen", "LBracket", "Rbracket", "PlusEq", "MinusEq", 
		"MultiplyEq", "DivideEq", "Dot", "Increment", "Decrement", "Comma", "Id", 
		"Number", "Whitespace", "Comment", "String"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MegaScrypt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MegaScryptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MegaScryptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MegaScryptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompoundIdContext : ParserRuleContext {
		public ObjectGetterContext objectGetter() {
			return GetRuleContext<ObjectGetterContext>(0);
		}
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public CompoundIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundId; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundIdContext compoundId() {
		CompoundIdContext _localctx = new CompoundIdContext(Context, State);
		EnterRule(_localctx, 0, RULE_compoundId);
		try {
			State = 60;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; objectGetter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; Match(Id);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(MegaScryptParser.Assign, 0); }
		public ITerminalNode Semicolon() { return GetToken(MegaScryptParser.Semicolon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode PlusEq() { return GetToken(MegaScryptParser.PlusEq, 0); }
		public ITerminalNode MinusEq() { return GetToken(MegaScryptParser.MinusEq, 0); }
		public ITerminalNode MultiplyEq() { return GetToken(MegaScryptParser.MultiplyEq, 0); }
		public ITerminalNode DivideEq() { return GetToken(MegaScryptParser.DivideEq, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 2, RULE_assignment);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; compoundId();
				State = 63; Match(Assign);
				State = 67;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 64; expression(0);
					}
					break;
				case 2:
					{
					State = 65; @object();
					}
					break;
				case 3:
					{
					State = 66; array();
					}
					break;
				}
				State = 69; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; compoundId();
				State = 72; Match(PlusEq);
				State = 73; expression(0);
				State = 74; Match(Semicolon);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; compoundId();
				State = 77; Match(MinusEq);
				State = 78; expression(0);
				State = 79; Match(Semicolon);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 81; compoundId();
				State = 82; Match(MultiplyEq);
				State = 83; expression(0);
				State = 84; Match(Semicolon);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86; compoundId();
				State = 87; Match(DivideEq);
				State = 88; expression(0);
				State = 89; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclerationContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Semicolon() { return GetToken(MegaScryptParser.Semicolon, 0); }
		public ITerminalNode Assign() { return GetToken(MegaScryptParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public DeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decleration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclerationContext decleration() {
		DeclerationContext _localctx = new DeclerationContext(Context, State);
		EnterRule(_localctx, 4, RULE_decleration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(Var);
			State = 94; Match(Id);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 95; Match(Assign);
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 96; expression(0);
					}
					break;
				case 2:
					{
					State = 97; @object();
					}
					break;
				case 3:
					{
					State = 98; array();
					}
					break;
				}
				}
			}

			State = 103; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		public ITerminalNode Increment() { return GetToken(MegaScryptParser.Increment, 0); }
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 6, RULE_increment);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Increment:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 105; Match(Increment);
				State = 106; compoundId();
				}
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 107; compoundId();
				State = 108; Match(Increment);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementContext : ParserRuleContext {
		public ITerminalNode Decrement() { return GetToken(MegaScryptParser.Decrement, 0); }
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public DecrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementContext decrement() {
		DecrementContext _localctx = new DecrementContext(Context, State);
		EnterRule(_localctx, 8, RULE_decrement);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Decrement:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 112; Match(Decrement);
				State = 113; compoundId();
				}
				}
				break;
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 114; compoundId();
				State = 115; Match(Decrement);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(MegaScryptParser.Number, 0); }
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public FuncDeclerationContext funcDecleration() {
			return GetRuleContext<FuncDeclerationContext>(0);
		}
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public ITerminalNode Excl() { return GetToken(MegaScryptParser.Excl, 0); }
		public ITerminalNode Subtract() { return GetToken(MegaScryptParser.Subtract, 0); }
		public ITerminalNode String() { return GetToken(MegaScryptParser.String, 0); }
		public ITerminalNode Null() { return GetToken(MegaScryptParser.Null, 0); }
		public ITerminalNode Bool() { return GetToken(MegaScryptParser.Bool, 0); }
		public ITerminalNode Multiply() { return GetToken(MegaScryptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(MegaScryptParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(MegaScryptParser.Modulus, 0); }
		public ITerminalNode Add() { return GetToken(MegaScryptParser.Add, 0); }
		public ITerminalNode LT() { return GetToken(MegaScryptParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(MegaScryptParser.GT, 0); }
		public ITerminalNode LTEquals() { return GetToken(MegaScryptParser.LTEquals, 0); }
		public ITerminalNode GTEquals() { return GetToken(MegaScryptParser.GTEquals, 0); }
		public ITerminalNode Equals() { return GetToken(MegaScryptParser.Equals, 0); }
		public ITerminalNode NEquals() { return GetToken(MegaScryptParser.NEquals, 0); }
		public ITerminalNode And() { return GetToken(MegaScryptParser.And, 0); }
		public ITerminalNode Or() { return GetToken(MegaScryptParser.Or, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 120; Match(Number);
				}
				break;
			case 2:
				{
				State = 121; compoundId();
				}
				break;
			case 3:
				{
				State = 122; increment();
				}
				break;
			case 4:
				{
				State = 123; decrement();
				}
				break;
			case 5:
				{
				State = 124; array();
				}
				break;
			case 6:
				{
				State = 125; invocation();
				}
				break;
			case 7:
				{
				State = 126; funcDecleration();
				}
				break;
			case 8:
				{
				State = 127; Match(LParen);
				State = 128; expression(0);
				State = 129; Match(RParen);
				}
				break;
			case 9:
				{
				State = 131; Match(Excl);
				State = 132; expression(11);
				}
				break;
			case 10:
				{
				State = 133; Match(Subtract);
				State = 134; expression(10);
				}
				break;
			case 11:
				{
				State = 135; Match(String);
				}
				break;
			case 12:
				{
				State = 136; Match(Null);
				}
				break;
			case 13:
				{
				State = 137; Match(Bool);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 158;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 141;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 142; expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 144;
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 145; expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 146;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 147;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTEquals) | (1L << LTEquals) | (1L << GT) | (1L << LT))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 148; expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 149;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 150;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 151; expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 152;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 153; Match(And);
						State = 154; expression(6);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 156; Match(Or);
						State = 157; expression(5);
						}
						break;
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public DeclerationContext decleration() {
			return GetRuleContext<DeclerationContext>(0);
		}
		public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		public WhileStmtContext whileStmt() {
			return GetRuleContext<WhileStmtContext>(0);
		}
		public ForeachStmtContext foreachStmt() {
			return GetRuleContext<ForeachStmtContext>(0);
		}
		public DoWhileStmtContext doWhileStmt() {
			return GetRuleContext<DoWhileStmtContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(MegaScryptParser.Semicolon, 0); }
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public ITerminalNode Break() { return GetToken(MegaScryptParser.Break, 0); }
		public ITerminalNode Continue() { return GetToken(MegaScryptParser.Continue, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; decleration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166; forStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; whileStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168; foreachStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 169; doWhileStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 176;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 170; invocation();
					}
					break;
				case 2:
					{
					State = 171; increment();
					}
					break;
				case 3:
					{
					State = 172; decrement();
					}
					break;
				case 4:
					{
					State = 173; returnStmt();
					}
					break;
				case 5:
					{
					State = 174; Match(Break);
					}
					break;
				case 6:
					{
					State = 175; Match(Continue);
					}
					break;
				}
				State = 178; Match(Semicolon);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(MegaScryptParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(MegaScryptParser.RBrace, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; Match(LBrace);
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Var) | (1L << Return) | (1L << For) | (1L << Do) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << If) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
					{
					{
					State = 182; statement();
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 188; Match(RBrace);
				}
				break;
			case T__0:
			case Var:
			case Return:
			case For:
			case Do:
			case While:
			case Break:
			case Continue:
			case If:
			case Increment:
			case Decrement:
			case Id:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(MegaScryptParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(MegaScryptParser.RBrace, 0); }
		public ObjectPairContext[] objectPair() {
			return GetRuleContexts<ObjectPairContext>();
		}
		public ObjectPairContext objectPair(int i) {
			return GetRuleContext<ObjectPairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(MegaScryptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(MegaScryptParser.Comma, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 16, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; Match(LBrace);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Id) {
				{
				{
				State = 193; objectPair();
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 194; Match(Comma);
					}
				}

				}
				}
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPairContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode Colon() { return GetToken(MegaScryptParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ObjectPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectPair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPairContext objectPair() {
		ObjectPairContext _localctx = new ObjectPairContext(Context, State);
		EnterRule(_localctx, 18, RULE_objectPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(Id);
			State = 205; Match(Colon);
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 206; expression(0);
				}
				break;
			case 2:
				{
				State = 207; @object();
				}
				break;
			case 3:
				{
				State = 208; array();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectGetterContext : ParserRuleContext {
		public ObjectAccessContext[] objectAccess() {
			return GetRuleContexts<ObjectAccessContext>();
		}
		public ObjectAccessContext objectAccess(int i) {
			return GetRuleContext<ObjectAccessContext>(i);
		}
		public ITerminalNode[] Dot() { return GetTokens(MegaScryptParser.Dot); }
		public ITerminalNode Dot(int i) {
			return GetToken(MegaScryptParser.Dot, i);
		}
		public ObjectGetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectGetter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectGetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectGetterContext objectGetter() {
		ObjectGetterContext _localctx = new ObjectGetterContext(Context, State);
		EnterRule(_localctx, 20, RULE_objectGetter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 211; objectAccess();
			}
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 212; Match(Dot);
					State = 213; objectAccess();
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectAccessContext : ParserRuleContext {
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ArrayIndexContext arrayIndex() {
			return GetRuleContext<ArrayIndexContext>(0);
		}
		public ObjectAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectAccess; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectAccessContext objectAccess() {
		ObjectAccessContext _localctx = new ObjectAccessContext(Context, State);
		EnterRule(_localctx, 22, RULE_objectAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(Id);
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 220; arrayIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 24, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Var) | (1L << Return) | (1L << For) | (1L << Do) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << If) | (1L << LBrace) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				State = 225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 223; statement();
					}
					break;
				case 2:
					{
					State = 224; block();
					}
					break;
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext[] elseIfBlock() {
			return GetRuleContexts<ElseIfBlockContext>();
		}
		public ElseIfBlockContext elseIfBlock(int i) {
			return GetRuleContext<ElseIfBlockContext>(i);
		}
		public ElseBlockContext elseBlock() {
			return GetRuleContext<ElseBlockContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; ifBlock();
			State = 234;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 231; elseIfBlock();
					}
					} 
				}
				State = 236;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 237; elseBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(MegaScryptParser.If, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(If);
			State = 241; Match(LParen);
			State = 242; expression(0);
			State = 243; Match(RParen);
			State = 244; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(MegaScryptParser.Else, 0); }
		public ITerminalNode If() { return GetToken(MegaScryptParser.If, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_elseIfBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(Else);
			State = 247; Match(If);
			State = 248; Match(LParen);
			State = 249; expression(0);
			State = 250; Match(RParen);
			State = 251; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseBlockContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(MegaScryptParser.Else, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseBlockContext elseBlock() {
		ElseBlockContext _localctx = new ElseBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(Else);
			State = 254; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclerationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(MegaScryptParser.Function, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public ITerminalNode LBrace() { return GetToken(MegaScryptParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(MegaScryptParser.RBrace, 0); }
		public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FuncDeclerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecleration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDecleration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclerationContext funcDecleration() {
		FuncDeclerationContext _localctx = new FuncDeclerationContext(Context, State);
		EnterRule(_localctx, 34, RULE_funcDecleration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(Function);
			State = 257; Match(LParen);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Var) {
				{
				State = 258; varList();
				}
			}

			State = 261; Match(RParen);
			State = 262; Match(LBrace);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << Var) | (1L << Return) | (1L << For) | (1L << Do) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << If) | (1L << Increment) | (1L << Decrement) | (1L << Id))) != 0)) {
				{
				{
				State = 263; statement();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 269; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		public ITerminalNode[] Var() { return GetTokens(MegaScryptParser.Var); }
		public ITerminalNode Var(int i) {
			return GetToken(MegaScryptParser.Var, i);
		}
		public ITerminalNode[] Id() { return GetTokens(MegaScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(MegaScryptParser.Id, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(MegaScryptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(MegaScryptParser.Comma, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 36, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(Var);
			State = 272; Match(Id);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 273; Match(Comma);
				State = 274; Match(Var);
				State = 275; Match(Id);
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(MegaScryptParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(Return);
			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Null) | (1L << Bool) | (1L << Excl) | (1L << Subtract) | (1L << LParen) | (1L << LBracket) | (1L << Increment) | (1L << Decrement) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 282; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 40, RULE_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; compoundId();
			State = 286; Match(LParen);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Null) | (1L << Bool) | (1L << Excl) | (1L << Subtract) | (1L << LParen) | (1L << LBracket) | (1L << Increment) | (1L << Decrement) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 287; paramList();
				}
			}

			State = 290; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(MegaScryptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(MegaScryptParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 42, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; expression(0);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 293; Match(Comma);
				State = 294; expression(0);
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(MegaScryptParser.LBracket, 0); }
		public ITerminalNode Rbracket() { return GetToken(MegaScryptParser.Rbracket, 0); }
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 44, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(LBracket);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Null) | (1L << Bool) | (1L << Excl) | (1L << Subtract) | (1L << LParen) | (1L << LBracket) | (1L << Increment) | (1L << Decrement) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
				{
				State = 301; paramList();
				}
			}

			State = 304; Match(Rbracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayIndexContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(MegaScryptParser.LBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Rbracket() { return GetToken(MegaScryptParser.Rbracket, 0); }
		public ArrayIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndex; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexContext arrayIndex() {
		ArrayIndexContext _localctx = new ArrayIndexContext(Context, State);
		EnterRule(_localctx, 46, RULE_arrayIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(LBracket);
			State = 307; expression(0);
			State = 308; Match(Rbracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(MegaScryptParser.For, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode[] Id() { return GetTokens(MegaScryptParser.Id); }
		public ITerminalNode Id(int i) {
			return GetToken(MegaScryptParser.Id, i);
		}
		public ITerminalNode Assign() { return GetToken(MegaScryptParser.Assign, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Semicolon() { return GetTokens(MegaScryptParser.Semicolon); }
		public ITerminalNode Semicolon(int i) {
			return GetToken(MegaScryptParser.Semicolon, i);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode LT() { return GetToken(MegaScryptParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(MegaScryptParser.GT, 0); }
		public ITerminalNode LTEquals() { return GetToken(MegaScryptParser.LTEquals, 0); }
		public ITerminalNode GTEquals() { return GetToken(MegaScryptParser.GTEquals, 0); }
		public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(For);
			State = 311; Match(LParen);
			State = 312; Match(Var);
			State = 313; Match(Id);
			State = 314; Match(Assign);
			State = 315; expression(0);
			State = 316; Match(Semicolon);
			State = 317; Match(Id);
			State = 318;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTEquals) | (1L << LTEquals) | (1L << GT) | (1L << LT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 319; expression(0);
			State = 320; Match(Semicolon);
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 321; increment();
				}
				break;
			case 2:
				{
				State = 322; decrement();
				}
				break;
			}
			State = 325; Match(RParen);
			State = 326; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStmtContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(MegaScryptParser.While, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStmtContext whileStmt() {
		WhileStmtContext _localctx = new WhileStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_whileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(While);
			State = 329; Match(LParen);
			State = 330; expression(0);
			State = 331; Match(RParen);
			State = 332; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStmtContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ITerminalNode Var() { return GetToken(MegaScryptParser.Var, 0); }
		public ITerminalNode Id() { return GetToken(MegaScryptParser.Id, 0); }
		public ITerminalNode In() { return GetToken(MegaScryptParser.In, 0); }
		public CompoundIdContext compoundId() {
			return GetRuleContext<CompoundIdContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForeachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStmtContext foreachStmt() {
		ForeachStmtContext _localctx = new ForeachStmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_foreachStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(T__0);
			State = 335; Match(LParen);
			State = 336; Match(Var);
			State = 337; Match(Id);
			State = 338; Match(In);
			State = 339; compoundId();
			State = 340; Match(RParen);
			State = 341; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStmtContext : ParserRuleContext {
		public ITerminalNode Do() { return GetToken(MegaScryptParser.Do, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode While() { return GetToken(MegaScryptParser.While, 0); }
		public ITerminalNode LParen() { return GetToken(MegaScryptParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(MegaScryptParser.RParen, 0); }
		public DoWhileStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStmtContext doWhileStmt() {
		DoWhileStmtContext _localctx = new DoWhileStmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_doWhileStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(Do);
			State = 344; block();
			State = 345; Match(While);
			State = 346; Match(LParen);
			State = 347; expression(0);
			State = 348; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMegaScryptVisitor<TResult> typedVisitor = visitor as IMegaScryptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 56, RULE_foreach);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x163', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '?', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x46', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '^', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x66', '\n', '\x4', '\x5', '\x4', 'h', '\n', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'x', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x8D', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\xA1', '\n', '\a', '\f', '\a', '\xE', '\a', '\xA4', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xB3', '\n', '\b', 
		'\x3', '\b', '\x5', '\b', '\xB6', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\xBA', '\n', '\t', '\f', '\t', '\xE', '\t', '\xBD', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC1', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC6', '\n', '\n', '\a', 
		'\n', '\xC8', '\n', '\n', '\f', '\n', '\xE', '\n', '\xCB', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xD4', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\a', '\f', '\xD9', '\n', '\f', '\f', '\f', '\xE', 
		'\f', '\xDC', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xE0', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xE4', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xE7', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xEB', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xEE', '\v', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xF1', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x106', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x10B', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x10E', '\v', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\a', '\x14', '\x117', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\x11A', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x11E', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x123', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x12A', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\x12D', '\v', '\x17', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x131', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x146', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x2', '\x3', '\f', '\x1F', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '\x2', '\x6', '\x3', '\x2', 
		'\x1C', '\x1E', '\x3', '\x2', '\x1A', '\x1B', '\x4', '\x2', '\x15', '\x16', 
		'\x18', '\x19', '\x3', '\x2', '\x13', '\x14', '\x2', '\x183', '\x2', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ']', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'_', '\x3', '\x2', '\x2', '\x2', '\b', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'w', '\x3', '\x2', '\x2', '\x2', '\f', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xC2', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\x16', '\xD5', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xE8', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', ' ', '\xF8', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xFF', '\x3', '\x2', '\x2', '\x2', '$', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x111', '\x3', '\x2', '\x2', '\x2', '(', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		',', '\x126', '\x3', '\x2', '\x2', '\x2', '.', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x134', '\x3', '\x2', '\x2', '\x2', '\x32', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x150', '\x3', '\x2', '\x2', '\x2', '\x38', '\x159', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x160', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x5', 
		'\x16', '\f', '\x2', '=', '?', '\a', '\x31', '\x2', '\x2', '>', '<', '\x3', 
		'\x2', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', '?', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x5', '\x2', '\x2', '\x2', '\x41', 
		'\x45', '\a', '!', '\x2', '\x2', '\x42', '\x46', '\x5', '\f', '\a', '\x2', 
		'\x43', '\x46', '\x5', '\x12', '\n', '\x2', '\x44', '\x46', '\x5', '.', 
		'\x18', '\x2', '\x45', '\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\"', '\x2', 
		'\x2', 'H', '^', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\x2', '\x2', 
		'\x2', 'J', 'K', '\a', ')', '\x2', '\x2', 'K', 'L', '\x5', '\f', '\a', 
		'\x2', 'L', 'M', '\a', '\"', '\x2', '\x2', 'M', '^', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x5', '\x2', '\x2', '\x2', 'O', 'P', '\a', '*', '\x2', 
		'\x2', 'P', 'Q', '\x5', '\f', '\a', '\x2', 'Q', 'R', '\a', '\"', '\x2', 
		'\x2', 'R', '^', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x5', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '+', '\x2', '\x2', 'U', 'V', '\x5', '\f', '\a', 
		'\x2', 'V', 'W', '\a', '\"', '\x2', '\x2', 'W', '^', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\x5', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', ',', '\x2', 
		'\x2', 'Z', '[', '\x5', '\f', '\a', '\x2', '[', '\\', '\a', '\"', '\x2', 
		'\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '@', '\x3', '\x2', 
		'\x2', '\x2', ']', 'I', '\x3', '\x2', '\x2', '\x2', ']', 'N', '\x3', '\x2', 
		'\x2', '\x2', ']', 'S', '\x3', '\x2', '\x2', '\x2', ']', 'X', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x5', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', 
		'\x4', '\x2', '\x2', '`', 'g', '\a', '\x31', '\x2', '\x2', '\x61', '\x65', 
		'\a', '!', '\x2', '\x2', '\x62', '\x66', '\x5', '\f', '\a', '\x2', '\x63', 
		'\x66', '\x5', '\x12', '\n', '\x2', '\x64', '\x66', '\x5', '.', '\x18', 
		'\x2', '\x65', '\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'h', '\x3', '\x2', '\x2', '\x2', 'g', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'j', '\a', '\"', '\x2', '\x2', 'j', '\a', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\a', '.', '\x2', '\x2', 'l', 'q', '\x5', '\x2', '\x2', '\x2', 
		'm', 'n', '\x5', '\x2', '\x2', '\x2', 'n', 'o', '\a', '.', '\x2', '\x2', 
		'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'k', '\x3', '\x2', '\x2', '\x2', 
		'p', 'm', '\x3', '\x2', '\x2', '\x2', 'q', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '/', '\x2', '\x2', 's', 'x', '\x5', '\x2', '\x2', 
		'\x2', 't', 'u', '\x5', '\x2', '\x2', '\x2', 'u', 'v', '\a', '/', '\x2', 
		'\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'w', 't', '\x3', '\x2', '\x2', '\x2', 'x', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\b', '\a', '\x1', '\x2', 'z', '\x8D', '\a', '\x32', 
		'\x2', '\x2', '{', '\x8D', '\x5', '\x2', '\x2', '\x2', '|', '\x8D', '\x5', 
		'\b', '\x5', '\x2', '}', '\x8D', '\x5', '\n', '\x6', '\x2', '~', '\x8D', 
		'\x5', '.', '\x18', '\x2', '\x7F', '\x8D', '\x5', '*', '\x16', '\x2', 
		'\x80', '\x8D', '\x5', '$', '\x13', '\x2', '\x81', '\x82', '\a', '%', 
		'\x2', '\x2', '\x82', '\x83', '\x5', '\f', '\a', '\x2', '\x83', '\x84', 
		'\a', '&', '\x2', '\x2', '\x84', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x17', '\x2', '\x2', '\x86', '\x8D', '\x5', '\f', '\a', 
		'\r', '\x87', '\x88', '\a', '\x1B', '\x2', '\x2', '\x88', '\x8D', '\x5', 
		'\f', '\a', '\f', '\x89', '\x8D', '\a', '\x35', '\x2', '\x2', '\x8A', 
		'\x8D', '\a', '\xF', '\x2', '\x2', '\x8B', '\x8D', '\a', '\x10', '\x2', 
		'\x2', '\x8C', 'y', '\x3', '\x2', '\x2', '\x2', '\x8C', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '|', '\x3', '\x2', '\x2', '\x2', '\x8C', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '~', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\f', '\v', '\x2', '\x2', '\x8F', 
		'\x90', '\t', '\x2', '\x2', '\x2', '\x90', '\xA1', '\x5', '\f', '\a', 
		'\f', '\x91', '\x92', '\f', '\n', '\x2', '\x2', '\x92', '\x93', '\t', 
		'\x3', '\x2', '\x2', '\x93', '\xA1', '\x5', '\f', '\a', '\v', '\x94', 
		'\x95', '\f', '\t', '\x2', '\x2', '\x95', '\x96', '\t', '\x4', '\x2', 
		'\x2', '\x96', '\xA1', '\x5', '\f', '\a', '\n', '\x97', '\x98', '\f', 
		'\b', '\x2', '\x2', '\x98', '\x99', '\t', '\x5', '\x2', '\x2', '\x99', 
		'\xA1', '\x5', '\f', '\a', '\t', '\x9A', '\x9B', '\f', '\a', '\x2', '\x2', 
		'\x9B', '\x9C', '\a', '\x12', '\x2', '\x2', '\x9C', '\xA1', '\x5', '\f', 
		'\a', '\b', '\x9D', '\x9E', '\f', '\x6', '\x2', '\x2', '\x9E', '\x9F', 
		'\a', '\x11', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\f', '\a', '\a', '\xA0', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x94', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\r', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xB6', '\x5', '\x1C', '\xF', 
		'\x2', '\xA6', '\xB6', '\x5', '\x4', '\x3', '\x2', '\xA7', '\xB6', '\x5', 
		'\x6', '\x4', '\x2', '\xA8', '\xB6', '\x5', '\x32', '\x1A', '\x2', '\xA9', 
		'\xB6', '\x5', '\x34', '\x1B', '\x2', '\xAA', '\xB6', '\x5', '\x36', '\x1C', 
		'\x2', '\xAB', '\xB6', '\x5', '\x38', '\x1D', '\x2', '\xAC', '\xB3', '\x5', 
		'*', '\x16', '\x2', '\xAD', '\xB3', '\x5', '\b', '\x5', '\x2', '\xAE', 
		'\xB3', '\x5', '\n', '\x6', '\x2', '\xAF', '\xB3', '\x5', '(', '\x15', 
		'\x2', '\xB0', '\xB3', '\a', '\v', '\x2', '\x2', '\xB1', '\xB3', '\a', 
		'\f', '\x2', '\x2', '\xB2', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\a', '\"', '\x2', 
		'\x2', '\xB5', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xBB', '\a', '\x1F', '\x2', 
		'\x2', '\xB8', '\xBA', '\x5', '\xE', '\b', '\x2', '\xB9', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC1', '\a', ' ', '\x2', '\x2', '\xBF', 
		'\xC1', '\x5', '\xE', '\b', '\x2', '\xC0', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC9', '\a', '\x1F', '\x2', '\x2', '\xC3', 
		'\xC5', '\x5', '\x14', '\v', '\x2', '\xC4', '\xC6', '\a', '\x30', '\x2', 
		'\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\a', ' ', '\x2', 
		'\x2', '\xCD', '\x13', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', 
		'\x31', '\x2', '\x2', '\xCF', '\xD3', '\a', '$', '\x2', '\x2', '\xD0', 
		'\xD4', '\x5', '\f', '\a', '\x2', '\xD1', '\xD4', '\x5', '\x12', '\n', 
		'\x2', '\xD2', '\xD4', '\x5', '.', '\x18', '\x2', '\xD3', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xDA', '\x5', '\x18', '\r', '\x2', '\xD6', '\xD7', '\a', 
		'-', '\x2', '\x2', '\xD7', '\xD9', '\x5', '\x18', '\r', '\x2', '\xD8', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xDC', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\a', '\x31', '\x2', 
		'\x2', '\xDE', '\xE0', '\x5', '\x30', '\x19', '\x2', '\xDF', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x5', '\xE', '\b', 
		'\x2', '\xE2', '\xE4', '\x5', '\x10', '\t', '\x2', '\xE3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xEC', '\x5', '\x1E', '\x10', '\x2', '\xE9', '\xEB', '\x5', ' ', '\x11', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\x5', 
		'\"', '\x12', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\r', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'%', '\x2', '\x2', '\xF4', '\xF5', '\x5', '\f', '\a', '\x2', '\xF5', '\xF6', 
		'\a', '&', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\x10', '\t', '\x2', '\xF7', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\xE', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\r', '\x2', '\x2', '\xFA', '\xFB', '\a', 
		'%', '\x2', '\x2', '\xFB', '\xFC', '\x5', '\f', '\a', '\x2', '\xFC', '\xFD', 
		'\a', '&', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x10', '\t', '\x2', '\xFE', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\xE', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\x10', '\t', '\x2', '\x101', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x5', '\x2', '\x2', '\x103', 
		'\x105', '\a', '%', '\x2', '\x2', '\x104', '\x106', '\x5', '&', '\x14', 
		'\x2', '\x105', '\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\a', '&', '\x2', '\x2', '\x108', '\x10C', '\a', '\x1F', 
		'\x2', '\x2', '\x109', '\x10B', '\x5', '\xE', '\b', '\x2', '\x10A', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', ' ', '\x2', 
		'\x2', '\x110', '%', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\x4', '\x2', '\x2', '\x112', '\x118', '\a', '\x31', '\x2', '\x2', '\x113', 
		'\x114', '\a', '\x30', '\x2', '\x2', '\x114', '\x115', '\a', '\x4', '\x2', 
		'\x2', '\x115', '\x117', '\a', '\x31', '\x2', '\x2', '\x116', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\'', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', '\a', '\x6', '\x2', 
		'\x2', '\x11C', '\x11E', '\x5', '\f', '\a', '\x2', '\x11D', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		')', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x5', '\x2', '\x2', 
		'\x2', '\x120', '\x122', '\a', '%', '\x2', '\x2', '\x121', '\x123', '\x5', 
		',', '\x17', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x125', '\a', '&', '\x2', '\x2', '\x125', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x12B', '\x5', '\f', '\a', '\x2', '\x127', 
		'\x128', '\a', '\x30', '\x2', '\x2', '\x128', '\x12A', '\x5', '\f', '\a', 
		'\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x130', 
		'\a', '\'', '\x2', '\x2', '\x12F', '\x131', '\x5', ',', '\x17', '\x2', 
		'\x130', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\a', '(', '\x2', '\x2', '\x133', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\a', '\'', '\x2', '\x2', '\x135', '\x136', '\x5', '\f', 
		'\a', '\x2', '\x136', '\x137', '\a', '(', '\x2', '\x2', '\x137', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\a', '\a', '\x2', '\x2', 
		'\x139', '\x13A', '\a', '%', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x4', 
		'\x2', '\x2', '\x13B', '\x13C', '\a', '\x31', '\x2', '\x2', '\x13C', '\x13D', 
		'\a', '!', '\x2', '\x2', '\x13D', '\x13E', '\x5', '\f', '\a', '\x2', '\x13E', 
		'\x13F', '\a', '\"', '\x2', '\x2', '\x13F', '\x140', '\a', '\x31', '\x2', 
		'\x2', '\x140', '\x141', '\t', '\x4', '\x2', '\x2', '\x141', '\x142', 
		'\x5', '\f', '\a', '\x2', '\x142', '\x145', '\a', '\"', '\x2', '\x2', 
		'\x143', '\x146', '\x5', '\b', '\x5', '\x2', '\x144', '\x146', '\x5', 
		'\n', '\x6', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x147', '\x148', '\a', '&', '\x2', '\x2', '\x148', '\x149', '\x5', 
		'\x10', '\t', '\x2', '\x149', '\x33', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\a', '\t', '\x2', '\x2', '\x14B', '\x14C', '\a', '%', '\x2', 
		'\x2', '\x14C', '\x14D', '\x5', '\f', '\a', '\x2', '\x14D', '\x14E', '\a', 
		'&', '\x2', '\x2', '\x14E', '\x14F', '\x5', '\x10', '\t', '\x2', '\x14F', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\a', '\x3', '\x2', 
		'\x2', '\x151', '\x152', '\a', '%', '\x2', '\x2', '\x152', '\x153', '\a', 
		'\x4', '\x2', '\x2', '\x153', '\x154', '\a', '\x31', '\x2', '\x2', '\x154', 
		'\x155', '\a', '\n', '\x2', '\x2', '\x155', '\x156', '\x5', '\x2', '\x2', 
		'\x2', '\x156', '\x157', '\a', '&', '\x2', '\x2', '\x157', '\x158', '\x5', 
		'\x10', '\t', '\x2', '\x158', '\x37', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15A', '\a', '\b', '\x2', '\x2', '\x15A', '\x15B', '\x5', '\x10', '\t', 
		'\x2', '\x15B', '\x15C', '\a', '\t', '\x2', '\x2', '\x15C', '\x15D', '\a', 
		'%', '\x2', '\x2', '\x15D', '\x15E', '\x5', '\f', '\a', '\x2', '\x15E', 
		'\x15F', '\a', '&', '\x2', '\x2', '\x15F', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\a', '\x3', '\x2', '\x2', '\x161', ';', '\x3', 
		'\x2', '\x2', '\x2', '!', '>', '\x45', ']', '\x65', 'g', 'p', 'w', '\x8C', 
		'\xA0', '\xA2', '\xB2', '\xB5', '\xBB', '\xC0', '\xC5', '\xC9', '\xD3', 
		'\xDA', '\xDF', '\xE3', '\xE5', '\xEC', '\xF0', '\x105', '\x10C', '\x118', 
		'\x11D', '\x122', '\x12B', '\x130', '\x145',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
